// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  phone         String    @unique
  password      String?
  firstName     String?
  lastName      String?
  username      String?   
  role          Role      @default(CUSTOMER)
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)
  otpAttempts   Int       @default(0)
  lastOtpSentAt DateTime?
  isMfaEnabled  Boolean   @default(false)
  mfaSecret     String?

  // Admin specific fields
  branchId     String?
  branch       Branch?        @relation(fields: [branchId], references: [id])
  loginHistory LoginHistory[]

  // Relations
  refreshTokens RefreshToken[]
  orders        Order[]        @relation("UserOrders")
  riderOrders   Order[]        @relation("RiderOrders")

  createdFoods Food[] @relation("FoodCreator")
  updatedFoods Food[] @relation("FoodUpdater")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  createdAddons Addon[] @relation("AddonCreator") // Changed from Addon
  updatedAddons Addon[] @relation("AddonUpdater") // Changed from Addon

  cart          Cart[]
  notifications Notification[]
  auditLogs     AuditLog[]
  deletedAt     DateTime? // Soft delete
  Manager       Manager?
  Address       Address[]
  Feedback      Feedback[]

  @@index([phone, isActive])
  @@index([email, isActive])
  @@map("users")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  CUSTOMER
}

model LoginHistory {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  loginTime  DateTime    @default(now())
  status     LoginStatus
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  location   String? // For storing geo-location
}

enum AdminRole {
  SUPER_ADMIN
  MANAGER
  RIDER
}

enum LoginStatus {
  SUCCESS
  FAILED
  BLOCKED
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isValid   Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Branch {
  id                  String          @id @default(cuid())
  name                String
  address             String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  isActive            Boolean         @default(true)
  // Relations with managers and orders
  foods               BranchFood[]
  managers            Manager[]
  orders              Order[]
  openingTime         String? // Store in 24-hour format
  closingTime         String?
  phoneNumber         String?
  email               String?
  coordinates         String? // Store latitude,longitude
  deliveryRadius      Decimal?        @db.Decimal(10, 2) // in kilometers
  isDeliveryAvailable Boolean         @default(true)
  isTakeawayAvailable Boolean         @default(true)
  isDineInAvailable   Boolean         @default(true)
  User                User[]
  Restaurant          Restaurant?     @relation(fields: [restaurantId], references: [id])
  restaurantId        String?
  BusinessHours       BusinessHours[]
  Cart                Cart[]
  Promotion           Promotion[]
}

model Manager {
  id        String   @id @default(cuid())
  userId    String   @unique
  branchId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  parentId    String? // For subcategories
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  foods       Food[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
}

model Food {
  id            String         @id @default(cuid())
  name          String
  description   String?
  basePrice     Decimal        @db.Decimal(10, 2)
  image         String?
  isPopular     Boolean        @default(false)
  isRecommended Boolean        @default(false)
  isNewArrival  Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  categories    Category[]
  variants      FoodVariant[]
  addons        FoodAddon[]
  branches      BranchFood[] // Many-to-many with branches
  createdBy     User           @relation("FoodCreator", fields: [createdById], references: [id])
  createdById   String
  updatedBy     User           @relation("FoodUpdater", fields: [updatedById], references: [id])
  updatedById   String
  priceHistory  PriceHistory[]

  cartItems CartItem[]
  deletedAt DateTime? // Soft delete
  OrderItem OrderItem[]

  @@index([isActive, isPopular])
  @@index([isActive, isRecommended])
  @@index([isActive, isNewArrival])
}

model BranchFood {
  id          String   @id @default(cuid())
  branchId    String
  foodId      String
  isAvailable Boolean  @default(true)
  customPrice Decimal? @db.Decimal(10, 2) // Override base price for this branch
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  food        Food     @relation(fields: [foodId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([branchId, foodId])
}

model FoodVariant {
  id           String         @id @default(cuid())
  name         String
  price        Decimal        @db.Decimal(10, 2)
  foodId       String
  food         Food           @relation(fields: [foodId], references: [id])
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  priceHistory PriceHistory[]
  OrderItem    OrderItem[]
  CartItem     CartItem[]
}

model Addon {
  id             String           @id @default(cuid())
  name           String
  price          Decimal          @db.Decimal(10, 2)
  description    String?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  foods          FoodAddon[]
  createdBy      User             @relation("AddonCreator", fields: [createdById], references: [id])
  createdById    String
  updatedBy      User             @relation("AddonUpdater", fields: [updatedById], references: [id])
  updatedById    String
  priceHistory   PriceHistory[]
  OrderItemAddon OrderItemAddon[]
  CartItemAddon  CartItemAddon[]
}

model FoodAddon {
  id          String   @id @default(cuid())
  foodId      String
  addonId     String
  isRequired  Boolean  @default(false)
  maxQuantity Int      @default(1)
  food        Food     @relation(fields: [foodId], references: [id])
  addon       Addon    @relation(fields: [addonId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([foodId, addonId])
}

model PriceHistory {
  id          String       @id @default(cuid())
  oldPrice    Decimal      @db.Decimal(10, 2)
  newPrice    Decimal      @db.Decimal(10, 2)
  changeDate  DateTime     @default(now())
  foodId      String?
  variantId   String?
  addonId     String?
  food        Food?        @relation(fields: [foodId], references: [id])
  variant     FoodVariant? @relation(fields: [variantId], references: [id])
  addon       Addon?       @relation(fields: [addonId], references: [id])
  changedById String
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  user        User        @relation("UserOrders", fields: [userId], references: [id])
  branchId    String
  branch      Branch      @relation(fields: [branchId], references: [id])
  status      OrderStatus @default(PENDING)
  orderType   OrderType
  totalAmount Decimal     @db.Decimal(10, 2)
  items       OrderItem[]
  riderId     String?
  rider       User?       @relation("RiderOrders", fields: [riderId], references: [id])
  address     Address?    @relation(fields: [addressId], references: [id])
  addressId   String?
  tableNumber String? // For dine-in orders
  notes       String?

  payment        Payment?
  promotion      Promotion? @relation(fields: [promotionId], references: [id])
  promotionId    String?
  discountAmount Decimal    @default(0) @db.Decimal(10, 2)
  // tableId       String?
  // table         Table?        @relation(fields: [tableId], references: [id])

  deletedAt DateTime? // Soft delete
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?
  cancelReason          String?
  rating                Int?
  review                String?
  Feedback              Feedback[]

  @@index([status, createdAt])
  @@index([userId, createdAt])
  @@index([branchId, status])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum OrderType {
  DELIVERY
  TAKEAWAY
  DINE_IN
}

model OrderItem {
  id        String           @id @default(cuid())
  orderId   String
  order     Order            @relation(fields: [orderId], references: [id])
  foodId    String
  food      Food             @relation(fields: [foodId], references: [id])
  variantId String?
  variant   FoodVariant?     @relation(fields: [variantId], references: [id])
  quantity  Int
  unitPrice Decimal          @db.Decimal(10, 2)
  addons    OrderItemAddon[]
  subtotal  Decimal          @db.Decimal(10, 2)
}

model OrderItemAddon {
  id          String    @id @default(cuid())
  orderItemId String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  addonId     String
  addon       Addon     @relation(fields: [addonId], references: [id])
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10, 2)
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String?
  postalCode String?
  isDefault  Boolean @default(false)
  orders     Order[]
}

model Restaurant {
  id                 String              @id @default(cuid())
  name               String
  domain             String              @unique
  logo               String?
  branches           Branch[]
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  RestaurantSettings RestaurantSettings?
}

model RestaurantSettings {
  id                String     @id @default(cuid())
  restaurantId      String     @unique
  restaurant        Restaurant @relation(fields: [restaurantId], references: [id])
  currency          String     @default("BDT")
  timezone          String     @default("Asia/Dhaka")
  orderNumberPrefix String?
  minOrderAmount    Decimal?   @db.Decimal(10, 2)
  maxOrderAmount    Decimal?   @db.Decimal(10, 2)
  deliveryFee       Decimal?   @db.Decimal(10, 2)
  taxPercentage     Decimal?   @db.Decimal(10, 2)

  // Notification settings
  smsNotifications   Boolean @default(true)
  emailNotifications Boolean @default(true)

  // Error notification settings
  errorNotificationEmail String?
  notifyOnCriticalErrors Boolean @default(true)

  // Feedback settings
  autoResponseEnabled   Boolean @default(false)
  feedbackResponseDelay Int     @default(24) // hours
  // Auto-assignment settings
  autoAssignRiders      Boolean @default(false)

  updatedAt DateTime @updatedAt
}

model BusinessHours {
  id        String  @id @default(cuid())
  branchId  String
  branch    Branch  @relation(fields: [branchId], references: [id])
  dayOfWeek Int // 0-6 (Sunday-Saturday)
  openTime  String // 24-hour format
  closeTime String // 24-hour format
  isClosed  Boolean @default(false)

  @@unique([branchId, dayOfWeek])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  branchId  String
  branch    Branch     @relation(fields: [branchId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, branchId])
}

model CartItem {
  id        String          @id @default(cuid())
  cartId    String
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  foodId    String
  food      Food            @relation(fields: [foodId], references: [id])
  variantId String?
  variant   FoodVariant?    @relation(fields: [variantId], references: [id])
  quantity  Int
  addons    CartItemAddon[]
}

model CartItemAddon {
  id         String   @id @default(cuid())
  cartItemId String
  cartItem   CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  addonId    String
  addon      Addon    @relation(fields: [addonId], references: [id])
  quantity   Int
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_BANKING
  ONLINE
}

model Promotion {
  id          String        @id @default(cuid())
  code        String        @unique
  type        PromotionType
  value       Decimal       @db.Decimal(10, 2)
  minOrder    Decimal?      @db.Decimal(10, 2)
  maxDiscount Decimal?      @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean       @default(true)
  usageLimit  Int?
  usedCount   Int           @default(0)
  branchId    String?
  branch      Branch?       @relation(fields: [branchId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Order       Order[]
}

enum PromotionType {
  PERCENTAGE
  FIXED
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
}

enum NotificationType {
  ORDER_STATUS
  PROMOTION
  SYSTEM
  PAYMENT
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  entityType String
  entityId   String
  oldData    Json?
  newData    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model Feedback {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  orderId   String?
  order     Order?         @relation(fields: [orderId], references: [id])
  rating    Int
  review    String?
  type      FeedbackType
  response  String?
  status    FeedbackStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId, createdAt])
  @@index([orderId])
}

enum FeedbackType {
  ORDER
  FOOD
  SERVICE
  APP
  OTHER
}

enum FeedbackStatus {
  PENDING
  RESPONDED
  RESOLVED
  IGNORED
}
